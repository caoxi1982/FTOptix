// Copyright © 2022 Rockwell Automation, Inc.
// Generated on: 3/20/2023 2:48:15 PM
// Generated by: MSENG2022\msukerman
//
using Cca.Cgp.Core.Base;
using Cca.Cgp.Core.Base.Interfaces;
using FTOptix.HMIProject;
using NetZero.Internal;
using System;
using System.Collections.Generic;
using UAManagedCore;

namespace NetZero.SO.Strategies.Responses
{
    public class NewSmartObjects : ResponseStrategy
    {
        private uint[] uia = null;

        public NewSmartObjects(IResponseHandler responseHandler) : base(responseHandler)
        {
            // change priority according to your needs
            Priority = 30;
        }

        /// <summary>
        /// handles an individual response
        /// </summary>
        /// <param name="response"><see cref="DataItemResponse"/> to handle</param>
        public override void HandleMessage(DataItemResponse response)
        {
        }

        /// <summary>
        /// accepts all incoming messages that are handled
        /// by this strategy, and then passes them
        /// one-by-one to the HandleMessage method
        /// </summary>
        /// <param name="responses"><see cref="IEnumerable{DataItemResponse}"/> to check</param>
        public override void HandleMessages(IEnumerable<DataItemResponse> responses)
        {
            foreach (var response in responses)
            {
                if (response.vqts[0].Quality.IsGood)
                {
                    var opt = ((Newtonsoft.Json.Linq.JObject)response.reactionOptions).ToObject<ModelList>();
                    var targetVariable = InformationModel.GetVariable(new NodeId(opt.ns, new Guid(opt.guids)));

                    if (targetVariable != null)
                    {
                        switch (opt.typeid)
                        {
                            case 1:
                                {
                                    targetVariable.DataValue = new DataValue(Convert.ToBoolean(response.vqts[0].v), 192, DateTime.Parse(response.vqts[0].t, null, System.Globalization.DateTimeStyles.RoundtripKind));
                                    break;
                                }
                            case 3:
                                {
                                    targetVariable.DataValue = new DataValue(Convert.ToInt16(response.vqts[0].v), 192, DateTime.Parse(response.vqts[0].t, null, System.Globalization.DateTimeStyles.RoundtripKind));
                                    break;
                                }
                            case 6:
                                {
                                    targetVariable.DataValue = new DataValue(Convert.ToInt32(response.vqts[0].v), 192, DateTime.Parse(response.vqts[0].t, null, System.Globalization.DateTimeStyles.RoundtripKind));
                                    break;
                                }
                            case 8:
                                {
                                    targetVariable.DataValue = new DataValue(Convert.ToInt64(response.vqts[0].v), 192, DateTime.Parse(response.vqts[0].t, null, System.Globalization.DateTimeStyles.RoundtripKind));
                                    break;
                                }
                            case 10:
                                {
                                    targetVariable.DataValue = new DataValue(Convert.ToSingle(response.vqts[0].v), 192, DateTime.Parse(response.vqts[0].t, null, System.Globalization.DateTimeStyles.RoundtripKind));
                                    break;
                                }
                            case 11:
                                {
                                    targetVariable.DataValue = new DataValue(Convert.ToDouble(response.vqts[0].v), 192, DateTime.Parse(response.vqts[0].t, null, System.Globalization.DateTimeStyles.RoundtripKind));
                                    break;
                                }
                            case 12:
                                {
                                    targetVariable.DataValue = new DataValue((string)response.vqts[0].v, 192, DateTime.Parse(response.vqts[0].t, null, System.Globalization.DateTimeStyles.RoundtripKind));
                                    break;
                                }
                            default:
                                {
                                    Log.Error("Smart Objects", $"Invalid data type ${response.id}");
                                    break;
                                }
                        }

                        EA_Runtime.Instance.Variable_VariableChange(
                            this, new VariableChangeEventArgs(targetVariable,
                            targetVariable.Value, targetVariable.Value,
                            null,
                            0));
                    }
                }
                else
                {
                    Log.Error("Smart Objects", $"Fail to read {response.id}");
                }
            }
        }

        /// <summary>
        /// determines if this strategy should handled a given
        /// response based on the properties of the response object
        /// </summary>
        /// <param name="response"><see cref="DataItemResponse"/> to check</param>
        /// <returns>True if this strategy handles this response</returns>
        public override bool Handles(DataItemResponse response)
        {
            return response.contextPrefix == "StartingMonitor";
        }
    }
}
