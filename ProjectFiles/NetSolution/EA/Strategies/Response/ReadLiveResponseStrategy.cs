// Copyright © 2022 Rockwell Automation, Inc.
// Generated on: 9/14/2022 12:18:31 PM
// Generated by: RA-INT\NHender
//

using Cca.Cgp.Core.Base;
using Cca.Cgp.Core.Base.Ia;
using Cca.Cgp.Core.Base.Interfaces;
using Serilog;
using System;
using System.Collections.Generic;

namespace NetZero.EA.Strategies.Response
{
    public class ReadLiveResponseStrategy : ResponseStrategy
    {
        private static readonly ILogger s_Log = Log.ForContext<ReadLiveResponseStrategy>();

        public ReadLiveResponseStrategy(IResponseHandler responseHandler) : base(responseHandler)
        {
            // change priority according to your needs
            Priority = 30;
        }

        /// <summary>
        /// handles an individual response
        /// </summary>
        /// <param name="response"><see cref="DataItemResponse"/> to handle</param>
        public override void HandleMessage(DataItemResponse response)
        {
            // check if the response is good
            //if (response.vqts[0].Quality.IsGood)
            //{
            //    // get the value of the first VQT
            //    // this assumes it is a numeric value
            //    var value = response.vqts[0].v.ToDecimal();
            //    // check to see if there are reaction options
            //    if (response.reactionOptions is { })
            //    {
            //        // assume we want to deserialize to a known object type
            //        var options = response.ReactionOptionsToJson();
            //        if(options != null)
            //        {
            //            dynamic reactionOptions = JsonConvert.DeserializeObject(options);
            //        }

            //    }
            //}
            //if (s_Log.IsEnabled(Serilog.Events.LogEventLevel.Debug))
            //{
            //    s_Log.Debug("{id}: {rid}: {value} : {reactionOptions}",
            //                ResponseHandler.Id,
            //                response.id,
            //                response.vqts[0].v,
            //                response.reactionOptions is { } ? response.reactionOptions : string.Empty);
            //}
        }

        /// <summary>
        /// accepts all incoming messages that are handled
        /// by this strategy, and then passes them
        /// one-by-one to the HandleMessage method
        /// </summary>
        /// <param name="responses"><see cref="IEnumerable{DataItemResponse}"/> to check</param>
        public override void HandleMessages(IEnumerable<DataItemResponse> responses)
        {
            // custom group response processing here
            // below is how the base class method handles
            // each response in the responses
            //foreach (var response in responses)
            //{
            //    HandleMessage(response);
            //}

            // then let the normal processing continue
            // this allows any observers to do their processing
            base.HandleMessages(responses);
            // if no change, then simply remove this method
            // as the  base  method will  be called by default
        }

        /// <summary>
        /// determines if this strategy should handled a given
        /// response based on the properties of the response object
        /// </summary>
        /// <param name="response"><see cref="DataItemResponse"/> to check</param>
        /// <returns>True if this strategy handles this response</returns>
        public override bool Handles(DataItemResponse response)
        {
            // check to see if we have the necessary information
            // needed to process this response
            if (response is null || string.IsNullOrEmpty(response.contextPrefix) || string.IsNullOrEmpty(response.id))
            {
                return false;
            }
            //
            // we should return true if this strategy handles this response
            return response.reactionType.Equals(ReactionType.Value) &&
                   response.contextPrefix.Equals("#LiveValues", StringComparison.OrdinalIgnoreCase);
        }
    }
}
